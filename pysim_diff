diff --git a/pySim/cards.py b/pySim/cards.py
index 9951efd..22189c9 100644
--- a/pySim/cards.py
+++ b/pySim/cards.py
@@ -1302,11 +1302,226 @@ class SysmoISIMSJA2(UsimCard):
 
                return
 
+class CardCentricISIM(UsimCard):
+       """
+       Card Centric ISIM
+       """
+
+       name = 'cardCentricISIM'
+
+       def __init__(self, ssc):
+               super(CardCentricISIM, self).__init__(ssc)
+               self._scc.cla_byte = "00"
+               self._scc.sel_ctrl = "0004" #request an FCP
+
+       @classmethod
+       def autodetect(kls, scc):
+               try:
+                       # Try card model #1
+                       atr = "3B 9F 96 80 1F 87 80 31 E0 73 FE 21 1B 67 4A 4C 75 30 30 02 48 A9"
+                       if scc.get_atr() == toBytes(atr):
+                               return kls(scc)
+               except:
+                       return None
+               return None
+
+       def program(self, p):
+               # authenticate as ADM using default key (written on the card..)
+               if not p['pin_adm']:
+                       raise ValueError("Please provide a PIN-ADM as there is no default one")
+               self._scc.verify_chv(0x0A, h2b(p['pin_adm']))
+
+               # This type of card does not allow to reprogram the ICCID.
+               # Reprogramming the ICCID would mess up the card os software
+               # license management, so the ICCID must be kept at its factory
+               # setting!
+               if p.get('iccid'):
+                       print("Warning: Programming of the ICCID is not implemented for this type of card.")
+
+               # select DF_GSM
+               self._scc.select_file(['7f20'])
+
+               # write EF.IMSI
+               if p.get('imsi'):
+                       self._scc.update_binary('6f07', enc_imsi(p['imsi']))
+
+               # EF.PLMNsel
+               if p.get('mcc') and p.get('mnc'):
+                       sw = self.update_plmnsel(p['mcc'], p['mnc'])
+                       if sw != '9000':
+                               print("Programming PLMNsel failed with code %s"%sw)
+
+               # EF.PLMNwAcT
+               if p.get('mcc') and p.get('mnc'):
+                       sw = self.update_plmn_act(p['mcc'], p['mnc'])
+                       if sw != '9000':
+                               print("Programming PLMNwAcT failed with code %s"%sw)
+
+               # EF.OPLMNwAcT
+               if p.get('mcc') and p.get('mnc'):
+                       sw = self.update_oplmn_act(p['mcc'], p['mnc'])
+                       if sw != '9000':
+                               print("Programming OPLMNwAcT failed with code %s"%sw)
+
+               # EF.HPLMNwAcT
+               if p.get('mcc') and p.get('mnc'):
+                       sw = self.update_hplmn_act(p['mcc'], p['mnc'])
+                       if sw != '9000':
+                               print("Programming HPLMNwAcT failed with code %s"%sw)
+
+               # EF.AD
+               if p.get('mcc') and p.get('mnc'):
+                       sw = self.update_ad(p['mnc'])
+                       if sw != '9000':
+                               print("Programming AD failed with code %s"%sw)
+
+               # EF.SMSP
+               if p.get('smsp'):
+                       r = self._scc.select_file(['3f00', '7f10'])
+                       data, sw = self._scc.update_record('6f42', 1, lpad(p['smsp'], 104), force_len=True)
+
+               # EF.MSISDN
+               # TODO: Alpha Identifier (currently 'ff'O * 20)
+               # TODO: Capability/Configuration1 Record Identifier
+               # TODO: Extension1 Record Identifier
+               if p.get('msisdn') is not None:
+                       msisdn = enc_msisdn(p['msisdn'])
+                       content = 'ff' * 20 + msisdn + 'ff' * 2
+
+                       r = self._scc.select_file(['3f00', '7f10'])
+                       data, sw = self._scc.update_record('6F40', 1, content, force_len=True)
+
+               # EF.ACC
+               if p.get('acc'):
+                       sw = self.update_acc(p['acc'])
+                       if sw != '9000':
+                               print("Programming ACC failed with code %s"%sw)
+
+               # Populate AIDs
+               self.read_aids()
+
+               # update EF-SIM_AUTH_KEY (and EF-USIM_AUTH_KEY_2G, which is
+               # hard linked to EF-USIM_AUTH_KEY)
+               self._scc.select_file(['3f00'])
+               self._scc.select_file(['a515'])
+               if p.get('ki'):
+                       self._scc.update_binary('6f20', p['ki'], 1)
+               if p.get('opc'):
+                       self._scc.update_binary('6f20', p['opc'], 17)
+
+               # update EF-USIM_AUTH_KEY in ADF.USIM
+               auth_key = None
+               if '9000' == self.select_adf_by_aid():
+                       if p.get('ki'):
+                               self._scc.update_binary('af20', p['ki'], 1)
+                       if p.get('opc'):
+                               self._scc.update_binary('af20', p['opc'], 17)
+                       # Fetch the contents of EF-USIM_AUTH_KEY in ADF.USIM
+                       # There is a mismatch in Algorith between USIM and ISIM
+                       auth_key, sw = self._scc.read_binary('af20')
+
+                       # update EF.EHPLMN in ADF.USIM
+                       if self.file_exists(EF_USIM_ADF_map['EHPLMN']):
+                               if p.get('mcc') and p.get('mnc'):
+                                       sw = self.update_ehplmn(p['mcc'], p['mnc'])
+                                       if sw != '9000':
+                                               print("Programming EHPLMN failed with code %s"%sw)
+
+                       # update EF.ePDGId in ADF.USIM
+                       if self.file_exists(EF_USIM_ADF_map['ePDGId']):
+                               if p.get('epdgid'):
+                                       sw = self.update_epdgid(p['epdgid'])
+                                       if sw != '9000':
+                                               print("Programming ePDGId failed with code %s"%sw)
+
+               # update EF-USIM_AUTH_KEY in ADF.ISIM
+               if '9000' == self.select_adf_by_aid(adf="isim"):
+                       if p.get('ki'):
+                               self._scc.update_binary('af20', p['ki'], 1)
+                       if p.get('opc'):
+                               self._scc.update_binary('af20', p['opc'], 17)
+                       self._scc.update_binary('af20', auth_key)
+
+               # Check whether we have the AID of USIM, if so select it by its AID
+               # EF.ePDGSelection - 6ff4
+               if '9000' == self.select_adf_by_aid() and p.get('mcc') and p.get('mnc'):
+                       (res, sw) = self._scc.read_binary('6ff4', length=None, offset=0)
+                       if sw == '9000':
+                               self._scc.update_binary('6ff4', enc_ePDGSelection(res, p['mcc'], p['mnc']))
+
+               # EF.ePDGIdEm - 6ff5
+               if p.get('epdgid') and ('9000' == self.select_adf_by_aid()):
+                       addr_type = get_addr_type(p['epdgid'])
+                       if addr_type == None:
+                               raise ValueError("Unknown ePDG Id address type or invalid address provided")
+                       content = enc_addr_tlv(p['epdgid'], ('%02x' % addr_type))
+                       self._scc.update_binary('6ff5', rpad(content, self._scc.binary_size('6ff5')*2))
+
+               # EF.ePDGSelectionEm - 6ff6
+               if '9000' == self.select_adf_by_aid() and p.get('mcc') and p.get('mnc'):
+                       (res, sw) = self._scc.read_binary('6ff6', length=None, offset=0)
+                       if sw == '9000':
+                               self._scc.update_binary('6ff6', enc_ePDGSelection(res, p['mcc'], p['mnc']))
+
+               # After successfully programming EF.ePDGId and EF.ePDGSelection,
+               # Set service 106 and 107 as available in EF.UST
+               # Disable service 95, 99, 115 if ISIM application is present
+               # Set service 110, 111 as available after programming EF.ePDGIdEm and EF.ePDGSelectionEm
+               if '9000' == self.select_adf_by_aid():
+                       (res, sw) = self._scc.read_binary(['6f38'])
+                       if sw == '9000':
+                               content = enc_st(res, 106)
+                               content = enc_st(content, 107)
+                               content = enc_st(content, 110)
+                               content = enc_st(content, 111)
+                               content = enc_st(content, 95, state=0)
+                               content = enc_st(content, 99, state=0)
+                               content = enc_st(content, 115, state=0)
+                               self._scc.update_binary('6f38', content)
+
+               # Check whether we have th AID of ISIM, if so select it by its AID
+               # EF.P-CSCF - 6f09
+               if p.get('pcscf') and ('9000' == self.select_adf_by_aid(adf="isim")):
+                       content = enc_addr_tlv(p['pcscf'])
+                       data, sw = self._scc.update_record('6f09', 1, rpad(content, self._scc.record_size('6f09')*2))
+
+               # Check whether we have the AID of ISIM, if so select it by its AID
+               # EF.DOMAIN - Home Network Domain Name
+               if '9000' == self.select_adf_by_aid(adf="isim"):
+                       if p.get('ims_hdomain'):
+                               hex_str = s2h(p['ims_hdomain'])
+                       elif p.get('mcc') and p.get('mnc'):
+                               # MCC always has 3 digits
+                               mcc = lpad(p['mcc'], 3, "0")
+                               # MNC always has 3 digits in domain form
+                               mnc = lpad(p['mnc'], 3, "0")
+                               plmn_str = 'mnc' + mnc + '.mcc' + mcc
+                               hex_str = s2h('ims.' + plmn_str + '.3gppnetwork.org')
+                       content = '80' + ('%02x' % (len(hex_str)//2)) + hex_str
+                       self._scc.update_binary('6f03', rpad(content, self._scc.binary_size('6f03')*2))
+
+               # EF.IMPI - IMS private user identity
+               # TODO: Validate IMPI input
+               if '9000' == self.select_adf_by_aid(adf="isim") and p.get('impi'):
+                       hex_str = s2h(p['impi'])
+                       content = '80' + ('%02x' % (len(hex_str)//2)) + hex_str
+                       self._scc.update_binary('6f02', rpad(content, self._scc.binary_size('6f02')*2))
+
+               # EF.IMPU - IMS public user identity
+               # TODO: Validate IMPU input
+               # Support multiple IMPU if there is enough space
+               if '9000' == self.select_adf_by_aid(adf="isim") and p.get('impu'):
+                       hex_str = s2h(p['impu'])
+                       content = '80' + ('%02x' % (len(hex_str)//2)) + hex_str
+                       self._scc.update_record('6f04', 1, rpad(content, self._scc.record_size('6f04')*2))
+
+               return
+
 
 # In order for autodetection ...
 _cards_classes = [ FakeMagicSim, SuperSim, MagicSim, GrcardSim,
                   SysmoSIMgr1, SysmoSIMgr2, SysmoUSIMgr1, SysmoUSIMSJS1,
-                  FairwavesSIM, OpenCellsSim, WavemobileSim, SysmoISIMSJA2 ]
+                  FairwavesSIM, OpenCellsSim, WavemobileSim, SysmoISIMSJA2, CardCentricISIM ]
 
 def card_autodetect(scc):
        for kls in _cards_classes:

